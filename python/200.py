import ipdb
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        n = len(grid)
        if not n:
            return 0
        m = len(grid[0])
        for row in grid:
            row.insert(0, '0')
            row.append('0')
        grid.insert(0, '0' * (m + 2))
        grid.append('0' * (m + 2))
        x = [[-1] * (m+2) for _ in range(n + 2)]
        union = {}
        c = 0
        for i in range(1, n+1):
            for j in range(1, m+1):
                if grid[i][j] == '0':
                    continue
                if x[i-1][j] != -1 or x[i][j-1] != -1:
                    if x[i-1][j] != -1 and x[i][j-1] != -1 and x[i-1][j] != x[i][j-1]:
                        # merge union
                        _min, _max = x[i-1][j], x[i][j-1]
                        if x[i][j-1] < x[i-1][j]:
                            _min, _max = _max, _min
                        for _i, _j in union[_max]:
                            x[_i][_j] = _min
                        union[_min].extend(union[_max])
                        union.pop(_max)
                        x[i][j] = _min
                    else:  # one is not -1 or the two equal
                        x[i][j] = x[i-1][j] if x[i-1][j] != -1 else x[i][j-1]
                    union[x[i][j]].append((i, j))
                else:
                    x[i][j] = c
                    union[c] = [(i, j)]
                    c += 1
        return len(union)


s = Solution()
# print(s.numIslands([
#     ['1', '1', '1', '1', '0'],
#     ['1', '1', '0', '1', '0'],
#     ['1', '1', '0', '0', '0'],
#     ['0', '0', '0', '0', '0'],
# ]))

# print(s.numIslands([
#     ['1', '1', '0', '0', '0'],
#     ['1', '1', '0', '0', '0'],
#     ['0', '0', '1', '0', '0'],
#     ['0', '0', '0', '1', '1'],
# ]))

# print(s.numIslands([
#     ['1', '0', '0', '1', '0', '1'],
#     ['1', '0', '0', '1', '0', '1'],
#     ['1', '1', '0', '1', '0', '0'],
#     ['0', '1', '1', '1', '1', '0'],
# ]))

# print(s.numIslands([
#     ['1', '1', '1', '1', '0'],
#     ['0', '0', '0', '1', '0'],
#     ['1', '1', '1', '1', '0'],
#     ['0', '0', '0', '1', '1'],
# ]))

print(s.numIslands([
    ["0","0","1","0","0","1","0","0","0","0","0","0","0","0","1","1","0","1","0","0"],
    ["0","1","0","0","0","0","1","1","0","0","0","1","0","0","1","1","0","0","0","0"],
    ["1","0","1","1","0","0","0","0","0","1","0","0","0","1","0","1","1","1","1","0"],
    ["1","1","0","0","0","0","0","0","0","0","1","0","0","1","1","1","1","1","1","1"],
    ["0","0","0","0","0","1","0","0","0","1","1","1","1","0","1","0","0","0","0","0"],
    ["0","1","1","1","0","0","0","1","0","1","0","1","0","0","1","0","1","1","0","0"],
    ["0","0","0","0","0","0","0","0","1","1","1","0","0","1","1","0","0","0","0","0"],
    ["0","1","1","0","0","0","0","0","1","0","1","1","0","1","1","0","0","1","0","0"],
    ["0","0","1","1","1","0","0","1","0","0","0","0","0","0","0","1","1","1","0","1"],
    ["1","1","0","0","0","1","0","1","0","0","0","1","1","0","0","1","0","1","1","0"],
    ["0","0","0","0","0","0","1","0","1","1","0","0","1","0","1","1","1","1","0","1"],
    ["0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","0","0","1","0","1"],
    ["0","1","0","0","0","0","0","1","0","0","0","0","0","0","1","1","1","0","0","0"],
    ["0","0","1","0","1","0","0","1","1","0","1","1","1","0","0","1","1","0","0","1"],
    ["1","0","1","0","1","0","1","0","0","0","0","0","0","0","1","0","0","1","1","0"],
    ["1","0","1","1","1","0","1","0","0","0","0","0","0","1","0","0","0","0","1","1"],
    ["1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","0","0","1","1"],
    ["0","0","0","0","0","0","1","0","0","0","1","0","1","0","1","1","0","1","0","1"],
    ["1","0","0","1","0","0","0","0","0","0","1","0","0","0","0","0","1","1","1","1"],
    ["0","0","0","1","1","0","0","0","0","0","0","0","0","1","0","0","0","1","0","0"],
]))
