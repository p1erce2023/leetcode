#include <algorithm>
#include <array>
#include <cstdint>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <utility>
#include <vector>
using namespace std;
#define OUT(...) cout << __VA_ARGS__ << '\n'

using UMPII = unordered_map<int,int>;
using VI = vector<int>;
using VVI = vector<vector<int>>;

using LL = long long;
class Solution {
public:
    int MOD=1e9+7;
    int dp[3501][1751];
    int f(int be, int sz, string& s) {
        if (be+2*sz > s.size()) return 1;
        if (dp[be][sz] != -1) return dp[be][sz];
        LL ans = f(be, sz+1, s);
        if (s[be+sz]=='0') 
            return dp[be][sz] = ans;
        bool bigger = true;
        for (int i=0; i<sz; ++i) {
            if (s[be+i] < s[be+sz+i]) {
                break;
            } else if (s[be+i] > s[be+sz+i]) {
                bigger = false;
                break;
            }
        }
        if (bigger) {
            ans += f(be+sz, sz, s);
        } else if (be+sz*2 < s.size()) {
            ans += f(be+sz, sz+1, s);
        }
        return dp[be][sz] = ans;
    }
    int numberOfCombinations(string s) {
        if (s[0]=='0') return 0;
        memset(dp, -1, sizeof(dp));
        return f(0,1,s);
    }
};

int main() {
    auto sol = Solution();
    // parameters init
    string s;
    s
    OUT(sol.numberOfCombinations(s));
    s = "24896";
    OUT(sol.numberOfCombinations(s));
    s = "327";
    OUT(sol.numberOfCombinations(s));
    s = "3327";
    OUT(sol.numberOfCombinations(s));
    s = "33327";
    OUT(sol.numberOfCombinations(s));
    s = "272727";
    OUT(sol.numberOfCombinations(s));
    return 0;
}
